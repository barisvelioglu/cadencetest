func MultiplyActivity(ctx workflow.Context, a, b int) (int, error) {
	if a == 0 || b == 0 {
		return 0, errors.New("Cannot multiply by zero")
	}
	return a * b, nil
}

type MultiplyWorkflowInput struct {
	A          int `json:"a"`
	B          int `json:"b"`
	Iterations int `json:"iterations"`
}

// Define the workflow
func MultiplyWorkflow(ctx workflow.Context, input *MultiplyWorkflowInput) (int, error) {
	// Create a NATS topic or queue for the worker services to subscribe to
	topic := "multiply"

	cwo := workflow.ChildWorkflowOptions{
		// Do not specify WorkflowID if you want Cadence to generate a unique ID for the child execution.
		ExecutionStartToCloseTimeout: time.Minute * 30,
	}
	ctx = workflow.WithChildOptions(ctx, cwo)

	// Send messages to the topic with the input parameters
	for i := 0; i < input.Iterations; i++ {

		var result string
		err := workflow.ExecuteChildWorkflow(ctx, MultiplyActivityWorker, topic, input.A, input.B).Get(ctx, &result)
		if err != nil {
			return 0, err
		}
	}

	// Listen for messages from the worker services
	var result int
	for i := 0; i < input.Iterations; i++ {

		// Receive a message from the topic
		var message []byte
		err := workflow.ExecuteActivity(ctx, ReceiveFromNATS, topic).Get(ctx, &message)
		if err != nil {
			return 0, err
		}

		// Parse the message and extract the result
		var res int
		err = json.Unmarshal(message, &res)
		if err != nil {
			return 0, err
		}

		// Combine the results
		result += res
	}

	return result, nil
}

// Define the worker service
func MultiplyActivityWorker(ctx workflow.Context, topic string, a, b int) (string, error) {
	// Execute the activity function
	activityOptions := workflow.ActivityOptions{
		TaskList:               "simpleworker",
		ScheduleToStartTimeout: time.Minute,
		StartToCloseTimeout:    time.Minute,
	}
	res, err := MultiplyActivity(ctx, a, b)
	if err != nil {
		return "11", err
	}

	// Send a message back to the topic with the result
	message, err := json.Marshal(res)
	if err != nil {
		return "12", err
	}
	err = workflow.ExecuteActivity(ctx, SendToNATS, topic, message, activityOptions).Get(ctx, nil)
	if err != nil {
		return "33", err
	}

	return "55", nil
}

func SendToNATS(ctx context.Context, topic string, message string) error {

	err := natsConnection.Publish(topic, []byte(message))
	if err != nil {
		return err
	}

	return nil
}

func ReceiveFromNATS(ctx context.Context, topic string) (string, error) {
	msg, err := natsConnection.SubscribeSync(topic)
	if err != nil {
		return "", err
	}

	nextMessage, err := msg.NextMsgWithContext(ctx)
	if err != nil {
		return "", err
	}

	return string(nextMessage.Data), nil
}
